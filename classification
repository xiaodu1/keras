import numpy as np
np.random.seed(1337)
from keras.datasets import mnist
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense,Activation
from keras.optimizers import RMSprop


#X shape (60000 28*28), y shape(10000,)
(x_train,y_train),(x_test,y_test) = mnist.load_data()


#data pre-processing
x_train = x_train.reshape(x_train.shape[0], -1) / 255.  #normalize
x_test = x_test.reshape(x_test.shape[0], -1) / 255.     #normalize
y_train = np_utils.to_categorical(y_train,num_classes=10) #转为One-hot表示
y_test = np_utils.to_categorical(y_test,num_classes=10)


#Another way to build your neural net
model = Sequential([
    Dense(32,input_dim=784),
    Activation('relu'),
    Dense(10),
    Activation('softmax'),
])

#Another way to define your optimizer
rmsprop = RMSprop(lr=0.001,rho=0.9,epsilon=1e-08,decay=0.0)


#We add metrics to get more results you want to see
model.compile(optimizer=rmsprop,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

print('Training ------------')
#Another way to train the model
model.fit(x_train,y_train,epochs=2,batch_size=32)

print('\nTesting ------------')
#Evaluate the model with the metrics we define earlier
loss,accuracy = model.evaluate(x_test,y_test)

print('test loss: ', loss)
print('test accuracy: ', accuracy)
