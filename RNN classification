import numpy as np
np.random.seed(1337)
from keras.datasets import mnist
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import SimpleRNN,Activation,Dense
from keras.optimizers import Adam

#图片像素28行
TIME_STEPS = 28
#图像像素28列
INPUT_SIZE = 28
BATCH_SIZE = 50
BATCH_INDEX =0
OUPUT_SIZE = 10
CELL_SIZE = 50
LR = 0.001


#X shape (60000, 28*28) ,y shape(10000,)
(x_train,y_train),(x_test,y_test) = mnist.load_data()


#data pre-processing
x_train = x_train.reshape(-1,28,28)/255
x_test = x_test.reshape(-1,28,28)/255
y_train = np_utils.to_categorical(y_train,num_classes=10)
y_test = np_utils.to_categorical(y_test,num_classes=10)


#build RNN model
model = Sequential()

#RNN cell
model.add(SimpleRNN(
    #for batch_input_shape,if using  tensorflow as the backend,we have to put None for the batch_size.
    #otherwise, model.evaluate() will get error
    batch_input_shape=(None,TIME_STEPS,INPUT_SIZE),
    output_dim=CELL_SIZE,
    unroll=True,
))


#ouput layer
model.add(Dense(OUPUT_SIZE))
model.add(Activation('softmax'))


#optimizer
adam = Adam(LR)
model.compile(optimizer=adam,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

#training
# data shape =(batch_num, steps,inputs/ouputs)
for step in range(4001):
    X_batch = x_train[BATCH_INDEX:BATCH_INDEX+BATCH_SIZE,:,:]
    Y_batch = y_train[BATCH_INDEX:BATCH_INDEX+BATCH_SIZE,:]
    cost = model.train_on_batch(X_batch,Y_batch)
    BATCH_INDEX += BATCH_SIZE
    #如果累加的INDEX超过了sample的个数就重新开始循环
    BATCH_INDEX = 0 if BATCH_INDEX >= x_train.shape[0] else BATCH_INDEX

    if step % 500 == 0:
        cost,accuracy =model.evaluate(x_test,y_test,batch_size=y_test.shape[0],verbose=False)
        print('test cost: ', cost, 'test accuracy: ', accuracy)

